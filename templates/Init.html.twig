<!-- A REVOIR 

 <?php
    // Connexion
    //              Serveur local en dessous à la bdd zoo arcadia,   Créer un tableau de paramètre de classe / avoir des warning php-bdd en cas d'erreur / specifie language utf8
    $pdo = new PDO('mysql:host=localhost;dbname=zooarcadia','root','root', array(PDO::ATTR_ERRMODE=> PDO:: ERRMODE_WARNING, PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES utf8'));
    $content = "";


<! _____________________________________________

Dans un projet Symfony, il est plus courant de mettre le code de connexion à la base de données dans un service dédié, plutôt que de le placer directement dans un template Twig.

Tu pourrais créer un service qui s'occupe de la gestion de la base de données, et utiliser ce service dans tes contrôleurs pour récupérer les données à afficher dans tes templates Twig. Cela suit le principe de séparation des préoccupations et rend ton code plus modulaire et facile à maintenir.

Voici un exemple de comment tu pourrais organiser ton code dans un projet Symfony :

Créer un service qui gère la connexion à la base de données. Tu peux le déclarer dans le fichier services.yaml de ton projet Symfony :

__________________
# config/services.yaml
services:
    App\Service\DatabaseService:
        arguments:
            $dsn: 'mysql:host=localhost;dbname=zooarcadia'
            $username: 'root'
            $password: 'root'
            $options:
                PDO::ATTR_ERRMODE: PDO:: ERRMODE_WARNING
                PDO::MYSQL_ATTR_INIT_COMMAND: 'SET NAMES utf8'
__________________
Dans ce service, tu peux écrire une méthode qui retourne une instance de PDO, par exemple :
__________________
// src/Service/DatabaseService.php
namespace App\Service;

use PDO;

class DatabaseService
{
    private $dsn;
    private $username;
    private $password;
    private $options;

    public function __construct(string $dsn, string $username, string $password, array $options = [])
    {
        $this->dsn = $dsn;
        $this->username = $username;
        $this->password = $password;
        $this->options = $options;
    }

    public function getConnection(): PDO
    {
        return new PDO($this->dsn, $this->username, $this->password, $this->options);
    }
}
____________________________
Dans tes contrôleurs Symfony, tu peux injecter ce service et utiliser la méthode getConnection() pour obtenir une connexion à la base de données.

Dans tes templates Twig, tu peux inclure des données provenant de la base de données en passant par les contrôleurs Symfony, et non en y accédant directement depuis le template.